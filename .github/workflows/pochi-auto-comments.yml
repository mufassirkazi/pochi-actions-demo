name: Pochi Auto-Comments

on:
  pull_request:
    types: [opened]
  push:
    branches:
      - main
  issues:
    types: [opened]

permissions:
  issues: write
  pull-requests: write
  contents: write

jobs:
  # -------------------------------
  # PR auto-summary
  # -------------------------------
  pr_auto_summary:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-comment for PR summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: "/pochi summarize this PR. Provide a high-level overview, key changes, risks, and what to test. (auto-triggered)"
            });

  # -------------------------------
  # Push commit summary
  # -------------------------------
  push_commit_summary:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-comment for Commit Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            const commits = context.payload.commits.map(c => `- ${c.message}`).join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 1, // üëà replace with an always-open "changelog" issue ID
              body: `/pochi summarize these commits:\n\n${commits}`
            });

  # -------------------------------
  # Issue ‚Üí design note (Mermaid)
  # -------------------------------
  issue_design_note:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-comment with Pochi instructions
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            const body = [
              "/pochi reply-only --no-files --no-tools",
              "",
              "‚ö†Ô∏è Do not edit files or run commands.",
              "Stay inside this issue comment only.",
              "",
              "When outputting a Mermaid diagram, use **this exact format**:",
              "",
              "```mermaid",
              "graph TD",
              "  A[Start] --> B[Next]",
              "```",
              "",
              "‚¨ÜÔ∏è Notice the line break after `mermaid`. Each line must be separate.",
              "",
              "After the diagram, add a short text explanation."
            ].join("\n");

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body
            });

  # -------------------------------
  # Fixer for Mermaid formatting
  # -------------------------------
  fix_mermaid_output:
    needs: issue_design_note
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Pochi reply
        run: sleep 45   # give Pochi enough time to post its reply

      - name: Fetch latest Pochi comment with retry
        id: fetch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            let pochiComment = null;
            for (let attempt = 0; attempt < 5; attempt++) {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                per_page: 10,
                sort: "created",
                direction: "desc"
              });
              pochiComment = comments.find(c =>
                c.user.login.includes("github-actions") &&
                c.body.includes("```mermaid")
              );
              if (pochiComment) {
                console.log("Found Pochi comment ‚úÖ");
                break;
              }
              console.log(`Retry ${attempt + 1}: Pochi comment not found, waiting 10s...`);
              await new Promise(r => setTimeout(r, 10000)); // wait 10s
            }
            if (!pochiComment) {
              core.setFailed("Could not find Pochi mermaid comment");
            } else {
              core.setOutput("comment_body", pochiComment.body);
              core.setOutput("comment_id", pochiComment.id);
            }

      - name: Rewrite Mermaid formatting
        if: steps.fetch.outputs.comment_body != ''
        run: |
          FIXED=$(echo "${{ steps.fetch.outputs.comment_body }}" \
            | sed 's/```mermaid graph/```mermaid\n graph/')
          echo "fixed_body<<EOF" >> $GITHUB_ENV
          echo "$FIXED" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post corrected Mermaid comment
        if: steps.fetch.outputs.comment_body != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: process.env.fixed_body
            });
