name: Pochi Auto-Comments

on:
  pull_request:
    types: [opened]
  push:
    branches:
      - main
  issues:
    types: [opened]

permissions:
  issues: write
  pull-requests: write
  contents: write

jobs:
  pr_auto_summary:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-comment for PR summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: "/pochi summarize this PR. Provide a high-level overview, key changes, risks, and what to test. (auto-triggered)"
            });

  push_commit_summary:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-comment for Commit Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            const commits = context.payload.commits.map(c => `- ${c.message}`).join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 1, // ðŸ‘ˆ or change to an always-open tracking issue
              body: `/pochi summarize these commits:\n\n${commits}`
            });

  issue_design_note:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-comment for Issue design note
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: "/pochi draft design notes for this issue. Break down problem, options, acceptance criteria, and edge cases. (auto-triggered)"
            });
